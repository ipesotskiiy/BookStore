"""
Django settings for bookstore project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path

from dotenv import load_dotenv

# from logger.logging import dict_log

from django.core.management.commands.runserver import Command as runserver

BASE_DIR = Path(__file__).resolve().parent.parent

dotenv_path = os.path.join(BASE_DIR, '.env')
load_dotenv(dotenv_path)

SECRET_KEY = os.getenv('SECRET_KEY')

DEBUG = True

CORS_ORIGIN_ALLOW_ALL = True

ALLOWED_HOSTS = [
    "*"
]

runserver.default_port = '8000'
runserver.default_addr = 'localhost'

DEFAULT_PORT = runserver.default_port
DEFAULT_ADDR = runserver.default_addr

CORS_ALLOW_CREDENTIALS = False

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework.authtoken',
    'knox',
    'corsheaders',
    'drf_yasg',
    'channels',

    'user',
    'product'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',

]

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],

}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=3),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=60),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=3),
}

ROOT_URLCONF = 'bookstore.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bookstore.wsgi.application'
ASGI_APPLICATION = 'bookstore.asgi.application'

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        "Auth Token eg [Bearer (JWT)]": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}

SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

CACHE_TTL = 60 * 1

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'user.User'

SITE_ID = 1
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]
STATIC_ROOT = os.path.join(BASE_DIR, 'static_root')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# LOGGING = dict_log()

# data for test database

#Superuser
TEST_SUPER_USER_EMAIL = 'admin@yandex.ru'
TEST_SUPER_USER_PASSWORD = 'qwerty'

# User

# favorites = models.ManyToManyField('product.Book', null=True, blank=True, related_name='favorites')
#     role = models.CharField(verbose_name='User role', max_length=10, null=True, blank=True)
#     email = models.EmailField(verbose_name='Your email', max_length=40, db_index=True, unique=True)
#     name = models.CharField(verbose_name='Your name', max_length=30, null=True, blank=True)
#     password = models.CharField(verbose_name='Your password', max_length=255)
#     avatar = models.FileField(
#         upload_to='',
#         verbose_name='Your avatar',
#         max_length=250,
#         null=True,
#         blank=True
#     )
#     is_active = models.BooleanField(default=True)
#     is_staff = models.BooleanField(default=False)

# Genre
TEST_GENRE_NAME = 'Horror'

# name = models.CharField(verbose_name='Genre', max_length=20)
#     userId = models.ForeignKey('user.User', on_delete=models.CASCADE, related_name='rating',
#                                verbose_name='user id', null=True, blank=True)

# Book

# genre = models.ManyToManyField(Genre, related_name='genres')
#     title = models.CharField(verbose_name='Book title', max_length=50)
#     author = models.CharField(verbose_name='Author', max_length=80)
#     price = models.DecimalField(verbose_name='Price', max_digits=8, decimal_places=2, null=True, blank=True)
#     cover = models.CharField(verbose_name='Cover', max_length=250, null=True, blank=True)
#     date_of_issue = models.DateField(verbose_name='Date of Issue', default=timezone.now)
#     in_stock = models.PositiveIntegerField(verbose_name='In stock', null=True, blank=True)
#     description = models.TextField(verbose_name='Description', max_length=900, null=True, blank=True)
#     averageRate = models.FloatField(verbose_name='Average rate', null=True, blank=True, max_length=3)
#     isInFavorite = models.BooleanField(null=True, blank=True)
